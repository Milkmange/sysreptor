"""
Django settings for sysreptor project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/stable/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/stable/ref/settings/
"""

import itertools
import json
import shlex
import socket
from datetime import timedelta
from pathlib import Path

import redis
from csp.constants import NONCE, NONE, SELF, UNSAFE_INLINE
from decouple import Csv, config
from kombu import Queue

from sysreptor.conf.plugins import load_plugins
from sysreptor.utils.fielddefinition.types import (
    BooleanField,
    EnumChoice,
    EnumField,
    FieldDefinition,
    JsonField,
    ListField,
    NumberField,
    ObjectField,
    StringField,
)
from sysreptor.utils.language import Language


def remove_empty_items(lst=None):
    return list(filter(None, lst or []))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
MEDIA_ROOT = config('MEDIA_ROOT', default=BASE_DIR / 'data', cast=Path)
MEDIA_ROOT.mkdir(parents=True, exist_ok=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/stable/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-ygvn9(x==kcv#r%pccf4rlzyz7_1v1b83$19&b2lsj6uz$mbro')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool, default=False)

APPEND_SLASH = True


# Internationalization
# https://docs.djangoproject.com/en/stable/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sessions',

    'rest_framework',
    'django_filters',
    'adrf',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'simple_history',
    'channels',

    'sysreptor',
    'sysreptor.users',
    'sysreptor.pentests',
    'sysreptor.notifications',
    'sysreptor.tasks',
    'sysreptor.conf.admin.AdminConfig',
    'sysreptor.api_utils',
]

MIDDLEWARE = [
    'sysreptor.utils.middleware.CacheControlMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'sysreptor.utils.logging.RequestLoggingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'sysreptor.utils.middleware.ExtendSessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'sysreptor.utils.middleware.AdminSessionMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
    'sysreptor.utils.middleware.PermissionsPolicyMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'sysreptor.conf.urls'
WEBSOCKET_URLCONF = 'sysreptor.conf.urls_websocket'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'sysreptor' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'sysreptor.users.auth.APITokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'sysreptor.utils.throttling.ScopedUserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'pdf': '3/10s',
        'pw': '10/1h',
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'sysreptor.utils.api.exception_handler',
    'PAGE_SIZE': 100,
    'UNICODE_JSON': False,
}

# OpenAPI schema generator settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'SysReptor API',
    'VERSION': '0.0.0',
    'DESCRIPTION': 'Warning: This is an unstable API used by the SysReptor frontend. There might be breaking changes. Use at own risk.',
    'SERVE_PUBLIC': True,
    'SCHEMA_COERCE_PATH_PK_SUFFIX': True,
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'ENUM_NAME_OVERRIDES': {
        'Language': 'sysreptor.pentests.models.Language',
        'ProjectTypeScope': 'sysreptor.pentests.models.ProjectTypeScope',
        'ProjectTypeScopeCreate': ['global', 'private'],
    },
}


# Database
# https://docs.djangoproject.com/en/stable/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': config('DATABASE_HOST', default=''),
        'PORT': config('DATABASE_PORT', default='5432'),
        'NAME': config('DATABASE_NAME', default=''),
        'USER': config('DATABASE_USER', default=''),
        'PASSWORD': config('DATABASE_PASSWORD', default=''),
        'DISABLE_SERVER_SIDE_CURSORS': True,
        'OPTIONS': {
            'options': f'-c search_path={shlex.quote(schema)}' if (schema := config('DATABASE_SCHEMA', default=None)) else None,
            'prepare_threshold': None,
            'pool': {
                'min_size': 4,
                'max_size': 8,
            },
        },
    },
}


# Websockets
REDIS_URL = config('REDIS_URL', default=None)
REDIS_CONNECTION_CONFIG = config('REDIS_CONNECTION_CONFIG', cast=json.loads, default='null')
DISABLE_WEBSOCKETS = config('DISABLE_WEBSOCKETS', cast=bool, default=False) or (not REDIS_URL and not REDIS_CONNECTION_CONFIG)
if not DISABLE_WEBSOCKETS:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [{
                    'socket_keepalive': True,
                    'socket_keepalive_options': {
                        socket.TCP_KEEPIDLE: 2,
                        socket.TCP_KEEPINTVL: 3,
                        socket.TCP_KEEPCNT: 5,
                    },
                    'retry_on_timeout': True,
                    'retry_on_error': [redis.ConnectionError],
                } | ( REDIS_CONNECTION_CONFIG or {'address': REDIS_URL})],
            },
        },
    }
else:
    CHANNEL_LAYERS = {}



# Password validation
# https://docs.djangoproject.com/en/stable/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
]

# Login URL of SPA frontend
LOGIN_URL = '/login/'

SESSION_ENGINE = 'sysreptor.users.backends.session'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = timedelta(hours=14).seconds
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
CSRF_COOKIE_SAMESITE = 'Strict'

MFA_SERVER_NAME = config('MFA_SERVER_NAME', default='SysReptor')
# FIDO2 RP ID: the domain name of the instance
MFA_FIDO2_RP_ID = config('MFA_FIDO2_RP_ID', default='')
MFA_LOGIN_TIMEOUT = timedelta(minutes=5)
SENSITIVE_OPERATION_REAUTHENTICATION_TIMEOUT = timedelta(minutes=15)


# Allowed Hosts
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(post_process=remove_empty_items), default='*')
if not MFA_FIDO2_RP_ID and len(ALLOWED_HOSTS) == 1 and '*' not in ALLOWED_HOSTS[0]:
    MFA_FIDO2_RP_ID = ALLOWED_HOSTS[0]

# Allow localhost. Required for docker healthchecks
ALLOWED_HOSTS += ['localhost', '127.0.0.1', '[::1]']
CSRF_TRUSTED_ORIGINS = list(itertools.chain(*map(lambda h: [f'https://{h}', f'http://{h}'], ALLOWED_HOSTS)))


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/stable/howto/static-files/

MEDIA_URL = 'data/'
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'
STATICFILES_DIRS = [
    BASE_DIR / 'frontend' / 'static',
]
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'sysreptor.conf.plugins.AppDirectoriesFinderWithoutPluginApps',
    'sysreptor.conf.plugins.PluginDirectoriesFinder',
]
WHITENOISE_MAX_AGE = None
WHITENOISE_IMMUTABLE_FILE_TEST = r'/_nuxt/'  # chunk files generated by nuxt

DEFAULT_STORAGE = config('DEFAULT_STORAGE', default=config('DEFAULT_FILE_STORAGE', default='filesystem'))
DEFAULT_S3_ACCESS_KEY = config('DEFAULT_S3_ACCESS_KEY', default='')
DEFAULT_S3_SECRET_KEY = config('DEFAULT_S3_SECRET_KEY', default='')
DEFAULT_S3_SESSION_TOKEN = config('DEFAULT_S3_SESSION_TOKEN', default=None)
DEFAULT_S3_BUCKET_NAME = config('DEFAULT_S3_BUCKET_NAME', default='')
DEFAULT_S3_ENDPOINT_URL = config('DEFAULT_S3_ENDPOINT_URL', default='')

UPLOADED_IMAGE_STORAGE = config('UPLOADED_IMAGE_STORAGE', default=DEFAULT_STORAGE)
UPLOADED_IMAGE_STORAGE = {
    'filesystem': 'sysreptor.utils.storages.EncryptedFileSystemStorage',
    's3': 'sysreptor.utils.storages.EncryptedS3Storage',
}.get(UPLOADED_IMAGE_STORAGE, UPLOADED_IMAGE_STORAGE)

UPLOADED_ASSET_STORAGE = config('UPLOADED_ASSET_STORAGE', default=DEFAULT_STORAGE)
UPLOADED_ASSET_STORAGE = {
    'filesystem': 'sysreptor.utils.storages.EncryptedFileSystemStorage',
    's3': 'sysreptor.utils.storages.EncryptedS3Storage',
}.get(UPLOADED_ASSET_STORAGE, UPLOADED_ASSET_STORAGE)

UPLOADED_FILE_STORAGE = config('UPLOADED_FILE_STORAGE', default=DEFAULT_STORAGE)
UPLOADED_FILE_STORAGE = {
    'filesystem': 'sysreptor.utils.storages.EncryptedFileSystemStorage',
    's3': 'sysreptor.utils.storages.EncryptedS3Storage',
}.get(UPLOADED_FILE_STORAGE, UPLOADED_FILE_STORAGE)

ARCHIVED_FILE_STORAGE = config('ARCHIVED_FILE_STORAGE', default=DEFAULT_STORAGE)
ARCHIVED_FILE_STORAGE = {
    'filesystem': 'sysreptor.utils.storages.UnencryptedFileSystemStorage',
    's3': 'sysreptor.utils.storages.UnencryptedS3Storage',
}.get(ARCHIVED_FILE_STORAGE, ARCHIVED_FILE_STORAGE)

STORAGES = {
    'staticfiles': {
        'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage',
    },
    'uploadedimages': {
        'BACKEND': UPLOADED_IMAGE_STORAGE,
        'OPTIONS': {
            'location': config('UPLOADED_IMAGE_LOCATION', default=(MEDIA_ROOT if 'filesystem' in UPLOADED_IMAGE_STORAGE.lower() else Path()) / 'uploadedimages', cast=Path),
            'access_key': config('UPLOADED_IMAGE_S3_ACCESS_KEY', default=DEFAULT_S3_ACCESS_KEY),
            'secret_key': config('UPLOADED_IMAGE_S3_SECRET_KEY', default=DEFAULT_S3_SECRET_KEY),
            'security_token': config('UPLOADED_IMAGE_S3_SESSION_TOKEN', default=DEFAULT_S3_SESSION_TOKEN),
            'bucket_name': config('UPLOADED_IMAGE_S3_BUCKET_NAME', default=DEFAULT_S3_BUCKET_NAME),
            'endpoint_url': config('UPLOADED_IMAGE_S3_ENDPOINT_URL', default=DEFAULT_S3_ENDPOINT_URL),
        },
    },
    'uploadedassets': {
        'BACKEND': UPLOADED_ASSET_STORAGE,
        'OPTIONS': {
            'location': config('UPLOADED_ASSET_LOCATION', default=(MEDIA_ROOT if 'filesystem' in UPLOADED_ASSET_STORAGE.lower() else Path()) / 'uploadedassets', cast=Path),
            'access_key': config('UPLOADED_ASSET_S3_ACCESS_KEY', default=DEFAULT_S3_ACCESS_KEY),
            'secret_key': config('UPLOADED_ASSET_S3_SECRET_KEY', default=DEFAULT_S3_SECRET_KEY),
            'security_token': config('UPLOADED_ASSET_S3_SESSION_TOKEN', default=DEFAULT_S3_SESSION_TOKEN),
            'bucket_name': config('UPLOADED_ASSET_S3_BUCKET_NAME', default=DEFAULT_S3_BUCKET_NAME),
            'endpoint_url': config('UPLOADED_ASSET_S3_ENDPOINT_URL', default=DEFAULT_S3_ENDPOINT_URL),
        },
    },
    'uploadedfiles': {
        'BACKEND': UPLOADED_FILE_STORAGE,
        'OPTIONS': {
            'location': config('UPLOADED_FILE_LOCATION', default=(MEDIA_ROOT if 'filesystem' in UPLOADED_FILE_STORAGE.lower() else Path()) / 'uploadedfiles', cast=Path),
            'access_key': config('UPLOADED_FILE_S3_ACCESS_KEY', default=DEFAULT_S3_ACCESS_KEY),
            'secret_key': config('UPLOADED_FILE_S3_SECRET_KEY', default=DEFAULT_S3_SECRET_KEY),
            'security_token': config('UPLOADED_FILE_S3_SESSION_TOKEN', default=DEFAULT_S3_SESSION_TOKEN),
            'bucket_name': config('UPLOADED_FILE_S3_BUCKET_NAME', default=DEFAULT_S3_BUCKET_NAME),
            'endpoint_url': config('UPLOADED_FILE_S3_ENDPOINT_URL', default=DEFAULT_S3_ENDPOINT_URL),
        },
    },
    'archivedfiles': {
        'BACKEND': ARCHIVED_FILE_STORAGE,
        'OPTIONS': {
            'location': config('ARCHIVED_FILE_LOCATION', default=(MEDIA_ROOT if 'filesystem' in UPLOADED_FILE_STORAGE.lower() else Path()) / 'archivedfiles', cast=Path),
            'access_key': config('ARCHIVED_FILE_S3_ACCESS_KEY', default=DEFAULT_S3_ACCESS_KEY),
            'secret_key': config('ARCHIVED_FILE_S3_SECRET_KEY', default=DEFAULT_S3_SECRET_KEY),
            'security_token': config('ARCHIVED_FILE_S3_SESSION_TOKEN', default=DEFAULT_S3_SESSION_TOKEN),
            'bucket_name': config('ARCHIVED_FILE_S3_BUCKET_NAME', default=DEFAULT_S3_BUCKET_NAME),
            'endpoint_url': config('ARCHIVED_FILE_S3_ENDPOINT_URL', default=DEFAULT_S3_ENDPOINT_URL),
        },
    },
}


# Email settings
EMAIL_HOST = config('EMAIL_HOST', default=None)
EMAIL_PORT = config('EMAIL_PORT', cast=int, default=25)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=False)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', cast=bool, default=False)
EMAIL_TIMEOUT = config('EMAIL_TIMEOUT', cast=int, default=10)
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='')

PASSWORD_RESET_TIMEOUT = 24 * 60 * 60  # 1 day


# Default primary key field type
# https://docs.djangoproject.com/en/stable/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.PentestUser'


# HTTP Header settings
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
SECURE_REFERRER_POLICY = 'same-origin'
X_FRAME_OPTIONS = 'SAMEORIGIN'

CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        'default-src': [NONE],
        'img-src': [SELF, 'data:'],
        'font-src': [SELF],
        'worker-src': [SELF],
        'connect-src': [SELF, 'data:', 'https://portal.sysreptor.com'],
        'frame-ancestors': [SELF],
        'form-action': [SELF],
        # PDF.js in Firefox requires "blob:" for saving/downloading PDFs
        'frame-src': [SELF, 'blob:'],
        # nuxt, vuetify and markdown preview use inline styles
        'style-src': [SELF, UNSAFE_INLINE],
        'script-src': [SELF, NONCE],
        # Trusted types are not compatible with django admin, django rest framework's browsable API, swagger UI and django debug toolbar
        # 'require-trusted-types-for': ["'script'"],
        # 'trusted-types': [
        #     'default',  # required for vuetify, unhead, mermaid
        #     'worker-url',  # load web workers via import URL
        #     'vue',  # used by vue and markdown
        #     'dompurify',  # used by mermaid
        #     "'allow-duplicates'",  # dompurify is used twice as dependency
        #     # monaco-editor policies
        #     'defaultWorkerFactory', 'tokenizeToString', 'standaloneColorizer',
        #     'editorViewLayer', 'domLineBreaksComputer', 'domLineBreaksComputer',
        #     'diffEditorWidget', 'editorGhostText', 'diffReview', 'stickyScrollViewLayer',
        # ],
    },
}

PERMISSIONS_POLICY = {
    'publickey-credentials-get': '(self)',
    'clipboard-write': '(self)',
    'accelerometer': '()',
    'ambient-light-sensor': '()',
    'autoplay': '()',
    'battery': '()',
    'camera': '()',
    'cross-origin-isolated': '()',
    'display-capture': '()',
    'document-domain': '()',
    'encrypted-media': '()',
    'execution-while-not-rendered': '()',
    'execution-while-out-of-viewport': '()',
    'fullscreen': '()',
    'geolocation': '()',
    'gyroscope': '()',
    'keyboard-map': '()',
    'magnetometer': '()',
    'microphone': '()',
    'midi': '()',
    'navigation-override': '()',
    'payment': '()',
    'picture-in-picture': '()',
    'screen-wake-lock': '()',
    'sync-xhr': '()',
    'usb': '()',
    'web-share': '()',
    'xr-spatial-tracking': '()',
    'clipboard-read': '()',
    'gamepad': '()',
    'speaker-selection': '()',
}


# Generate HTTPS URIs in responses for requests behind a reverse proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = config('USE_X_FORWARDED_HOST', cast=bool, default=False)
USE_X_FORWARDED_PORT = config('USE_X_FORWARDED_PORT', cast=bool, default=False)

# SSL required
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', cast=bool, default=False)
SECURE_REDIRECT_EXEMPT = [r'^api/v1/utils/healthcheck/?$', r'^api/public/utils/healthcheck/?$']
SESSION_COOKIE_SECURE = SECURE_SSL_REDIRECT
CSRF_COOKIE_SECURE = SECURE_SSL_REDIRECT


# Monkey-Patch django to disable CSRF everywhere
# CSRF middlware class is used as middleware and internally by DjangoRestFramework
from django.middleware import csrf  # noqa: E402

from sysreptor.utils.middleware import CustomCsrfMiddleware  # noqa: E402

csrf.CsrfViewMiddleware = CustomCsrfMiddleware


PDF_RENDER_SCRIPT_PATH = config('PDF_RENDER_SCRIPT_PATH', cast=Path, default=BASE_DIR / '..' / 'rendering' / 'dist' / 'bundle.js')
CHROMIUM_EXECUTABLE = config('CHROMIUM_EXECUTABLE', default='/usr/lib/chromium/chromium')
GHOSTSCRIPT_EXECUTABLE = config('GHOSTSCRIPT_EXECUTABLE', default='/usr/bin/gs')


# Celery client settings
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='')
CELERY_BROKER_URL_FILE = config('CELERY_BROKER_URL_FILE', default=None)
if not CELERY_BROKER_URL and CELERY_BROKER_URL_FILE:
    CELERY_BROKER_URL = Path(CELERY_BROKER_URL_FILE).read_text()
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='rpc://')


CELERY_RESULT_EXPIRES = timedelta(seconds=30)
CELERY_TASK_DEFAULT_EXCHANGE = 'tasks'
CELERY_TASK_QUEUES_NO_DECLARE = config('CELERY_TASK_QUEUES_NO_DECLARE', cast=bool, default=False)
CELERY_TASK_QUEUES = [
    Queue('rendering', routing_key='tasks.rendering', no_declare=CELERY_TASK_QUEUES_NO_DECLARE),
]
CELERY_TASK_ROUTES = {
    'sysreptor.render_pdf': {
        'exchange': CELERY_TASK_DEFAULT_EXCHANGE,
        'queue': 'rendering',
        'routing_key': 'tasks.rendering',
    },
}


# Celery worker settings
CELERY_SECURE_WORKER = config('CELERY_SECURE_WORKER', cast=bool, default=False)
if CELERY_SECURE_WORKER:
    CELERY_WORKER_POOL = 'prefork'
    CELERY_WORKER_CONCURRENCY = 1
    CELERY_WORKER_MAX_TASKS_PER_CHILD = 1
    CELERY_WORKER_PREFETCH_MULTIPLIER = 1
    CELERY_BROKER_POOL_LIMIT = 0
    CELERY_TASK_ACKS_LATE = False
    CELERY_WORKER_ENABLE_REMOTE_CONTROL = True


CELERY_WORKER_HIJACK_ROOT_LOGGER = False
CELERY_WORKER_SEND_TASK_EVENTS = False
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# Execute tasks locally, if no broker is configured
CELERY_TASK_ALWAYS_EAGER = not CELERY_BROKER_URL

# Maximum time a PDF rendering task is allowed to run. If a task takes longer, it gets cancelled.
# Set to 0 to disable the time limit
PDF_RENDERING_TIME_LIMIT = config('PDF_RENDERING_TIME_LIMIT', cast=int, default=5 * 60)


# History
class LicenseCheckBooleanProxy:
    def __bool__(self):
        from sysreptor.utils import license
        return license.is_professional(skip_db_checks=True)
SIMPLE_HISTORY_ENABLED = LicenseCheckBooleanProxy()
SIMPLE_HISTORY_HISTORY_ID_USE_UUID = True
SIMPLE_HISTORY_FILEFIELD_TO_CHARFIELD = True
SIMPLE_HISTORY_REVERT_DISABLED = True
SIMPLE_HISTORY_CLEANUP_TIMEFRAME = timedelta(hours=2)

# Static application settings
SHARING_MAX_FAILED_PASSWORD_ATTEMPTS = 100
AUTOMATICALLY_RESET_STALE_ARCHIVE_RESTORES_AFTER = timedelta(days=3)
REGEX_VALIDATION_TIMEOUT = timedelta(milliseconds=500)
# MAX_LOCK_TIME should not be less than 1.30min, because some browsers (Chromium) triggers timers only once per minute if the browser tab is inactive
MAX_LOCK_TIME = timedelta(seconds=90)

SPELLCHECK_URL = config('SPELLCHECK_URL', default=None)

BACKUP_KEY = config('BACKUP_KEY', default=None)


from sysreptor.utils.crypto import EncryptionKey  # noqa: E402

ENCRYPTION_KEYS = config('ENCRYPTION_KEYS', cast=EncryptionKey.from_json_list, default='')
DEFAULT_ENCRYPTION_KEY_ID = config('DEFAULT_ENCRYPTION_KEY_ID', default=None)
ENCRYPTION_PLAINTEXT_FALLBACK = config('ENCRYPTION_PLAINTEXT_FALLBACK', cast=bool, default=True)


# Health checks
HEALTH_CHECKS = {
    'database': 'sysreptor.api_utils.healthchecks.check_database',
    'migrations': 'sysreptor.api_utils.healthchecks.check_migrations',
    # 'cache': 'sysreptor.api_utils.healthchecks.check_cache',
}

# Notifications
VERSION = config('VERSION', default='dev')
INSTANCE_TAGS = config('INSTANCE_TAGS', cast=Csv(delimiter=';', post_process=remove_empty_items), default='on-premise')
NOTIFICATION_IMPORT_URL = config('NOTIFICATION_IMPORT_URL', default='https://portal.sysreptor.com/api/v1/notifications/')

# License
LICENSE = config('LICENSE', default=None)

# Plugins
PLUGIN_DIRS = config('PLUGIN_DIRS', cast=Csv(cast=Path, post_process=remove_empty_items), default='')
ENABLED_PLUGINS = config('ENABLED_PLUGINS', cast=Csv(post_process=remove_empty_items), default='')
INSTALLED_APPS += load_plugins(PLUGIN_DIRS, ENABLED_PLUGINS)


# Elastic APM
ELASTIC_APM_ENABLED = config('ELASTIC_APM_ENABLED', cast=bool, default=False)
ELASTIC_APM = {
    'ENABLED': ELASTIC_APM_ENABLED,
    'SERVICE_NAME': config('ELASTIC_APM_SERVICE_NAME', default=''),
    'API_KEY': config('ELASTIC_APM_SERVICE_TOKEN', default=''),
    'SERVER_URL': config('ELASTIC_APM_SERVER_URL', default=''),
    'SPAN_COMPRESSION_ENABLED': False,
    'DJANGO_AUTOINSERT_MIDDLEWARE': False,
    'DJANGO_TRANSACTION_NAME_FROM_ROUTE': True,
    'TRANSACTIONS_IGNORE_PATTERNS': ['^OPTIONS', ' /static/'],
}
if ELASTIC_APM_ENABLED:
    INSTALLED_APPS.append('elasticapm.contrib.django')

ELASTIC_APM_RUM_ENABLED = config('ELASTIC_APM_RUM_ENABLED', cast=bool, default=False)
ELASTIC_APM_RUM_CONFIG = {
    'active': ELASTIC_APM_RUM_ENABLED,
    'serviceName': config('ELASTIC_APM_RUM_SERVICE_NAME', default=''),
    'serverUrl': config('ELASTIC_APM_RUM_SERVER_URL', default=''),
    'serviceVersion': 'dev',
}
if ELASTIC_APM_RUM_ENABLED:
    CONTENT_SECURITY_POLICY['DIRECTIVES']['connect-src'].append(ELASTIC_APM_RUM_CONFIG['serverUrl'])


if DEBUG:
    INSTALLED_APPS += [
        'debug_toolbar',
    ]
    MIDDLEWARE += [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]
    INTERNAL_IPS = type('c', (), {'__contains__': lambda *a: True})()



logging_handlers = ['console'] + (['elasticapm'] if ELASTIC_APM_ENABLED else [])
LOGGING = {
    'version': 1,
    'disabled_existing_loggers': False,
    'formatters': {
        'default': {
            'class': 'logging.Formatter',
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'formatter': 'default',
            'class': 'logging.StreamHandler',
        },
        **({
            'elasticapm': {
                'level': 'WARNING',
                'class': 'elasticapm.contrib.django.handlers.LoggingHandler',
            },
        } if ELASTIC_APM_ENABLED else {}),
    },
    'root': {
        'level': 'INFO',
        'handlers': logging_handlers,
    },
    'loggers': {
        'celery': {
            'level': 'WARNING',
            'handlers': logging_handlers,
            'propagate': False,
        },
        'celery.worker.strategy': {
            'level': 'INFO',
            'handlers': logging_handlers,
            'propagate': False,
        },
        'weasyprint': {
            'level': 'ERROR',
            'handlers': logging_handlers,
            'propagate': False,
        },
        'playwright': {
            'level': 'WARNING',
            'hanlders': logging_handlers,
            'propagate': False,
        },
        'pikepdf': {
            'level': 'WARNING',
            'handlers': logging_handlers,
            'propagate': False,
        },
        'fontTools': {
            'level': 'WARNING',
            'handlers': logging_handlers,
            'propagate': False,
        },
        'elasticapm.errors': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}


CONFIGURATION_DEFINITION_CORE = FieldDefinition(fields=[
    BooleanField(
        id='ENABLE_PRIVATE_DESIGNS',
        default=False,
        extra_info={'group': 'other', 'professional_only': False},
        help_text='Users without Designer permission can create and edit private designs that cannot be read or used by other users. '
                  'If a project is created using a private design, a copy of the private design becomes accessible to project members.'),
    BooleanField(
        id='COMPRESS_IMAGES',
        default=True,
        extra_info={'group': 'other', 'professional_only': False},
        help_text='Uploaded images are compressed to reduce file size, but to retain quality suitable for PDF rendering.'),
    BooleanField(
        id='COMPRESS_PDFS',
        default=True,
        extra_info={'group': 'other', 'professional_only': False},
        help_text='PDFs are compressed via ghostscript when generating the final report (not in previews). '
                  'PDF compression reduces the file size, but can lead to quality loss of images and differences between the preview and the final PDF.'),
    BooleanField(
        id='GENERATE_ACCESSIBLE_PDFS',
        default=False,
        extra_info={'group': 'other', 'professional_only': False},
        help_text='Generate accessible PDFs in PDF/UA format (experimental). '
                  'Warning: Incompatible with COMPRESS_PDFS. PDFs are not compressed and might be larger.',
    ),
    ListField(
        id='STATUS_DEFINITIONS',
        items=ObjectField(properties=[
            StringField(id='id', required=True, pattern=r'^[a-zA-Z0-9_-]{1,50}$', help_text='Unique identifier for the status.'),
            StringField(id='label', required=True),
            StringField(id='icon', required=False, pattern=r'^mdi-[a-zA-Z0-9-_]+$', help_text='Status icon to display in UI. Available icons: https://pictogrammers.com/library/mdi/'),
        ]),
        default=[
            {"id": "ready-for-review", "label": "Ready for review", "icon": "mdi-check"},
            {"id": "needs-improvement", "label": "Needs improvement", "icon": "mdi-exclamation-thick"},
        ],
        required=False,
        extra_info={'group': 'other', 'professional_only': True, 'validate': lambda l: len(l) == len(set([s['id'] for s in l]))},
        help_text='Define custom statuses for findings and sections. In addition to the statuses defined here the statuses "in-progress" and "finished" are also available.',
    ),


    BooleanField(
        id='DISABLE_SHARING',
        default=False,
        extra_info={'group': 'sharing', 'professional_only': False},
        help_text='Disable sharing of project notes'),
    BooleanField(
        id='SHARING_PASSWORD_REQUIRED',
        default=False,
        extra_info={'group': 'sharing', 'professional_only': False},
        help_text='Require passwords to be set for shared notes'),
    BooleanField(
        id='SHARING_READONLY_REQUIRED',
        default=False,
        extra_info={'group': 'sharing', 'professional_only': False},
        help_text='Require shared notes to be read-only. Disables public writeable shared notes.'),


    ListField(
        id='PREFERRED_LANGUAGES',
        items=EnumField(choices=[EnumChoice(value=l[0], label=l[1]) for l in Language.choices]),
        required=False,
        extra_info={'group': 'language', 'professional_only': False, 'load_from_env': Csv(post_process=remove_empty_items)},
        help_text='Configure which languages are available in the language selection. '
                  'This setting also defines the order of languages in the selection. The first language is used as default.'),
    BooleanField(
        id='SPELLCHECK_DICTIONARY_PER_USER',
        default=False,
        extra_info={'group': 'language', 'professional_only': True},
        help_text='Words are added to a global spell check dictionary by default, which is available to all users. '
                  'Enable this setting to store words to user\'s personal spell check dictionaries.'
                  'Using both global and personal dictionaries at the same time is not possible. '
                  'Words of personal dictionaries are not shared between users. '
                  'If one user adds an unknown word to their personal dictionary, the spell checker will still detect an error for other users, '
                  'even when they are working in the same project or finding.'),
    BooleanField(
        id='SPELLCHECK_MODE_PICKY',
        default=False,
        extra_info={'group': 'language', 'professional_only': True},
        help_text='The picky mode enables additional spell check rules.'),
    JsonField(
        id='SPELLCHECK_LANGUAGETOOL_CONFIG',
        default=json.dumps({'disabledRules': 'TODO,TO_DO_HYPHEN'}),
        schema={'type': 'object'},
        extra_info={'group': 'language', 'professional_only': True},
        help_text='Selectively enable and disable rules or rule-categories by passing a LanguageTool configuration as JSON. '
                  'See https://languagetool.org/http-api/ for available options on the /check request. '
                  'See https://community.languagetool.org/rule/list for available rules (note: rule IDs might differ for languages).'),


    NumberField(
        id='ARCHIVING_THRESHOLD',
        default=2,
        minimum=1,
        extra_info={'group': 'archiving', 'professional_only': True, 'validate': lambda v: v.is_integer()},
        help_text='Archived projects require at least ARCHIVING_THRESHOLD number of users to restore the archive (see https://docs.sysreptor.com/reporting/archiving/). '
                  'By default two users are required, enforcing a 4-eye principle. '
                  'If ARCHIVING_THRESHOLD=1 every user is able to restore archived projects on their own, disabling the 4-eye principle. '
                  'Changing this setting does not affect previously archived projects.'),
    BooleanField(
        id='PROJECT_MEMBERS_CAN_ARCHIVE_PROJECTS',
        default=True,
        extra_info={'group': 'archiving', 'professional_only': True},
        help_text='If PROJECT_MEMBERS_CAN_ARCHIVE_PROJECTS is set to true (default), every project member can archive/restore a project. '
                  'Otherwise, only users with global archiver permission can archive/restore projects. '
                  'This means that encryption happens with fewer encryption keys and it will be more difficult '
                  'to keep up the quorum (ARCHIVING_THRESHOLD) for restoring projects (this could lead to availability problems).'),
    NumberField(
        id='AUTOMATICALLY_ARCHIVE_PROJECTS_AFTER',
        default=None,
        minimum=1,
        required=False,
        extra_info={'group': 'archiving', 'professional_only': True},
        help_text='Automatically archive finished projects after X days'),
    NumberField(
        id='AUTOMATICALLY_DELETE_ARCHIVED_PROJECTS_AFTER',
        default=None,
        minimum=1,
        required=False,
        extra_info={'group': 'archiving', 'professional_only': True},
        help_text='Automatically delete archived projects after X days'),


    BooleanField(
        id='GUEST_USERS_CAN_EDIT_PROJECTS',
        default=True,
        extra_info={'group': 'permissions', 'professional_only': True}),
    BooleanField(
        id='GUEST_USERS_CAN_UPDATE_PROJECT_SETTINGS',
        default=True,
        extra_info={'group': 'permissions', 'professional_only': True}),
    BooleanField(
        id='GUEST_USERS_CAN_CREATE_PROJECTS',
        default=True,
        extra_info={'group': 'permissions', 'professional_only': True}),
    BooleanField(
        id='GUEST_USERS_CAN_DELETE_PROJECTS',
        default=True,
        extra_info={'group': 'permissions', 'professional_only': True}),
    BooleanField(
        id='GUEST_USERS_CAN_IMPORT_PROJECTS',
        default=False,
        extra_info={'group': 'permissions', 'professional_only': True}),
    BooleanField(
        id='GUEST_USERS_CAN_SEE_ALL_USERS',
        default=False,
        extra_info={'group': 'permissions', 'professional_only': True}),
    BooleanField(
        id='GUEST_USERS_CAN_SHARE_NOTES',
        default=False,
        extra_info={'group': 'permissions', 'professional_only': True}),


    StringField(
        id='DEFAULT_AUTH_PROVIDER',
        default=None,
        required=False,
        extra_info={'group': 'auth', 'professional_only': True},
        help_text='Configuration of the default authentication provider when multiple authentication providers are enabled (e.g. OIDC via Microsoft Entra ID and username/password). '
                  'This setting will redirect users to the default authentication provider, skipping the selection. '
                  'Other authentication providers can still be used if login via the default provider fails.'),
    StringField(
        id='DEFAULT_REAUTH_PROVIDER',
        default=None,
        required=False,
        extra_info={'group': 'auth', 'professional_only': True}),
    StringField(
        id='OIDC_AZURE_CLIENT_ID',
        default=None,
        required=False,
        extra_info={'group': 'auth', 'professional_only': True}),
    StringField(
        id='OIDC_AZURE_CLIENT_SECRET',
        default=None,
        required=False,
        extra_info={'group': 'auth', 'professional_only': True}),
    StringField(
        id='OIDC_AZURE_TENANT_ID',
        default=None,
        required=False,
        extra_info={'group': 'auth', 'professional_only': True}),
    StringField(
        id='OIDC_GOOGLE_CLIENT_ID',
        default=None,
        required=False,
        extra_info={'group': 'auth', 'professional_only': True}),
    StringField(
        id='OIDC_GOOGLE_CLIENT_SECRET',
        default=None,
        required=False,
        extra_info={'group': 'auth', 'professional_only': True}),
    JsonField(
        id='OIDC_AUTHLIB_OAUTH_CLIENTS',
        default=None,
        required=False,
        schema={
            'type': 'object',
            'patternProperties': {'^.*$': {
                'type': 'object',
                'properties': {
                    'label': {'type': 'string'},
                    'client_id': {'type': 'string'},
                    'client_secret': {'type': 'string'},
                    'server_metadata_url': {'type': 'string', 'format': 'uri'},
                },
                'required': ['label', 'client_id', 'client_secret'],
                'additoinalProperties': True,
            }},
        },
        extra_info={'group': 'auth', 'professional_only': True}),
    BooleanField(
        id='REMOTE_USER_AUTH_ENABLED',
        default=False,
        extra_info={'group': 'auth', 'professional_only': True}),
    StringField(
        id='REMOTE_USER_AUTH_HEADER',
        default='Remote-User',
        extra_info={'group': 'auth', 'professional_only': True}),
    BooleanField(
        id='LOCAL_USER_AUTH_ENABLED',
        default=True,
        extra_info={'group': 'auth', 'professional_only': True},
        help_text='Enable/disable login via username/password. '
                  'If enabled, users can decide whether they want to log in via SSO or username/password.'
                  'Make sure all users have SSO identities configured before enabling this option. Else they will not be able to log in anymore.'),
    BooleanField(
        id='FORGOT_PASSWORD_ENABLED',
        default=False,
        extra_info={'group': 'auth', 'professional_only': True},
        help_text='Enable/disable the forgot password feature to allow users to reset their password by email. '
                  'This feature requires an email server to be configured and LOCAL_USER_AUTH_ENABLED=True.'),


    StringField(
        id='INSTALLATION_ID',
        required=False,
        extra_info={'internal': True, 'professional_only': False},
    ),
])
LOAD_CONFIGURATIONS_FROM_ENV = True
LOAD_CONFIGURATIONS_FROM_DB = config('LOAD_CONFIGURATIONS_FROM_DB', cast=bool, default=True)
