from uuid import uuid4

from django.db import models
from django.utils import timezone

from sysreptor.pentests import querysets
from sysreptor.users.models import PentestUser
from sysreptor.utils.crypto.fields import EncryptedField
from sysreptor.utils.history import HistoricalRecords
from sysreptor.utils.models import BaseModel


class NotebookPageMixin(models.Model):
    note_id = models.UUIDField(default=uuid4, db_index=True, editable=False)
    title = EncryptedField(base_field=models.TextField(default=''))
    text = EncryptedField(base_field=models.TextField(default=''))
    checked = models.BooleanField(null=True, blank=True)
    icon_emoji = models.CharField(max_length=32, null=True, blank=True)

    parent = models.ForeignKey(to='self', on_delete=models.CASCADE, null=True, blank=True)
    order = models.PositiveIntegerField()

    class Meta:
        abstract = True

    def __str__(self):
        return self.title

    def is_file_referenced(self, f) -> bool:
        return f.name in self.text or f.name in self.title

    def copy(self, **kwargs):
        return self.__class__.objects.copy(instance=self, **kwargs)


class ProjectNotebookPage(NotebookPageMixin, BaseModel):
    assignee = models.ForeignKey(to=PentestUser, on_delete=models.SET_NULL, null=True, blank=True)
    project = models.ForeignKey(to='PentestProject', on_delete=models.CASCADE, related_name='notes')

    history = HistoricalRecords()
    objects = querysets.ProjectNotebookPageManager()

    class Meta:
        unique_together = [('project', 'note_id')]


class UserNotebookPage(NotebookPageMixin, BaseModel):
    user = models.ForeignKey(to=PentestUser, on_delete=models.CASCADE, related_name='notes')

    objects = querysets.UserNotebookPageManager()

    class Meta:
        unique_together = [('user', 'note_id')]


class ShareInfo(BaseModel):
    note = models.ForeignKey(to=ProjectNotebookPage, on_delete=models.CASCADE, related_name='shareinfos')
    expire_date = models.DateField(db_index=True)
    is_revoked = models.BooleanField(default=False, db_index=True)
    password = EncryptedField(base_field=models.CharField(max_length=255, null=True, blank=True), null=True, blank=True)
    permissions_write = models.BooleanField(default=False)
    shared_by = models.ForeignKey(to=PentestUser, on_delete=models.SET_NULL, null=True, blank=True)
    comment = models.TextField(null=True, blank=True)

    failed_password_attempts = models.PositiveIntegerField(default=0)

    objects = querysets.ShareInfoManager()

    @property
    def is_active(self) -> bool:
        return self.expire_date >= timezone.now().date() and not self.is_revoked

