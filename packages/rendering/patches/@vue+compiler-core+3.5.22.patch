diff --git a/node_modules/@vue/compiler-core/dist/compiler-core.d.ts b/node_modules/@vue/compiler-core/dist/compiler-core.d.ts
index b524b7e..ba35c1f 100644
--- a/node_modules/@vue/compiler-core/dist/compiler-core.d.ts
+++ b/node_modules/@vue/compiler-core/dist/compiler-core.d.ts
@@ -662,6 +662,10 @@ export interface ParserOptions extends ErrorHandlingOptions, CompilerCompatOptio
      * e.g. elements that should preserve whitespace inside, e.g. `<pre>`
      */
     isPreTag?: (tag: string) => boolean;
+    /**
+     * e.g. elements that contain raw text instead of nested elements
+     */
+    isRawTextTag?: (tag: string) => boolean;
     /**
      * Elements that should ignore the first newline token per parinsg spec
      * e.g. `<textarea>` and `<pre>`
diff --git a/node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js b/node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js
index dd39182..bfdb33d 100644
--- a/node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js
+++ b/node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js
@@ -1538,7 +1538,7 @@ function isForStatement(stmt) {
 }
 function walkForStatement(stmt, isVar, onIdent) {
   const variable = stmt.type === "ForStatement" ? stmt.init : stmt.left;
-  if (variable && variable.type === "VariableDeclaration" && (variable.kind === "var" ? isVar : !isVar)) {
+  if (variable && variable.type === "VariableDeclaration" && (variable.kind === "var" ? isVar : false)) {
     for (const decl of variable.declarations) {
       for (const id of extractIdentifiers(decl.id)) {
         onIdent(id);
@@ -1549,7 +1549,7 @@ function walkForStatement(stmt, isVar, onIdent) {
 function walkSwitchStatement(stmt, isVar, onIdent) {
   for (const cs of stmt.cases) {
     for (const stmt2 of cs.consequent) {
-      if (stmt2.type === "VariableDeclaration" && (stmt2.kind === "var" ? isVar : !isVar)) {
+      if (stmt2.type === "VariableDeclaration" && (stmt2.kind === "var" ? isVar : false)) {
         for (const decl of stmt2.declarations) {
           for (const id of extractIdentifiers(decl.id)) {
             onIdent(id);
@@ -1931,6 +1931,7 @@ const defaultParserOptions = {
   getNamespace: () => 0,
   isVoidTag: NO,
   isPreTag: NO,
+  isRawTextTag: NO,
   isIgnoreNewlineTag: NO,
   isCustomElement: NO,
   onError: defaultOnError,
@@ -2327,6 +2328,11 @@ function endOpenTag(end) {
   if (ns === 0 && currentOptions.isPreTag(tag)) {
     inPre++;
   }
+  if (ns === 0 && currentOptions.isRawTextTag(tag)) {
+    tokenizer.inRCDATA = true;
+    tokenizer.currentSequence = toCharCodes("</" + tag);
+    tokenizer.sequenceIndex = 0;
+  }
   if (currentOptions.isVoidTag(tag)) {
     onCloseTag(currentOpenTag, end);
   } else {
@@ -2340,7 +2346,7 @@ function endOpenTag(end) {
 function onText(content, start, end) {
   {
     const tag = stack[0] && stack[0].tag;
-    if (tag !== "script" && tag !== "style" && content.includes("&")) {
+    if (tag !== "script" && tag !== "style" && !currentOptions.isRawTextTag(tag) && content.includes("&")) {
       content = currentOptions.decodeEntities(content, false);
     }
   }
